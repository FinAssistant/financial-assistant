{
  "openapi": "3.1.0",
  "info": {
    "title": "AI Financial Assistant",
    "version": "0.1.0"
  },
  "paths": {
    "/auth/register": {
      "post": {
        "tags": [
          "authentication"
        ],
        "summary": "Register",
        "description": "Register a new user with email and password.",
        "operationId": "register_auth_register_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "authentication"
        ],
        "summary": "Login",
        "description": "Login user with email and password.",
        "operationId": "login_auth_login_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": [
          "authentication"
        ],
        "summary": "Logout",
        "description": "Logout user by invalidating their token.\nNote: In a stateless JWT system, true token invalidation requires \na blacklist or token versioning. For this POC, we return success\nand rely on client-side token removal.",
        "operationId": "logout_auth_logout_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/auth/me": {
      "get": {
        "tags": [
          "authentication"
        ],
        "summary": "Get Current User Info",
        "description": "Get current authenticated user information.",
        "operationId": "get_current_user_info_auth_me_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Get Current User Info Auth Me Get"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/conversation/send": {
      "post": {
        "tags": [
          "conversation"
        ],
        "summary": "Send Message",
        "description": "Send a message to the AI conversation system with streaming response.\nCompatible with AI-SDK format for frontend integration.\nRequires authentication.",
        "operationId": "send_message_conversation_send_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConversationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/conversation/message": {
      "post": {
        "tags": [
          "conversation"
        ],
        "summary": "Send Message Non Streaming",
        "description": "Send a message to the AI conversation system (non-streaming version).\nAlternative endpoint for non-streaming clients.\nRequires authentication.",
        "operationId": "send_message_non_streaming_conversation_message_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConversationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConversationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/conversation/health": {
      "get": {
        "tags": [
          "conversation"
        ],
        "summary": "Health Check",
        "description": "Health check endpoint for the conversation system.\nRequires authentication to prevent abuse.",
        "operationId": "health_check_conversation_health_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConversationHealthResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/plaid/exchange": {
      "post": {
        "tags": [
          "plaid"
        ],
        "summary": "Exchange Public Token",
        "description": "Exchange Plaid public token for access token and store account information.\n\nThis endpoint:\n1. Exchanges the public token for an access token via Plaid API\n2. Retrieves account information from Plaid\n3. Stores encrypted access tokens and account data in the database\n4. Returns success confirmation with connected account details\n\nThe frontend should call this endpoint after successful Plaid Link completion.",
        "operationId": "exchange_public_token_api_plaid_exchange_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlaidTokenExchangeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlaidTokenExchangeResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/plaid/accounts": {
      "get": {
        "tags": [
          "plaid"
        ],
        "summary": "Get Connected Accounts",
        "description": "Get all connected accounts for the authenticated user.\n\nReturns a list of connected account information without sensitive data.",
        "operationId": "get_connected_accounts_api_plaid_accounts_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "additionalProperties": true,
                    "type": "object"
                  },
                  "type": "array",
                  "title": "Response Get Connected Accounts Api Plaid Accounts Get"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/plaid/accounts/{account_id}": {
      "delete": {
        "tags": [
          "plaid"
        ],
        "summary": "Disconnect Account",
        "description": "Disconnect (deactivate) a connected account.\n\nThis soft-deletes the account by setting is_active=False.",
        "operationId": "disconnect_account_api_plaid_accounts__account_id__delete",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Account Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Disconnect Account Api Plaid Accounts  Account Id  Delete"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/health": {
      "get": {
        "summary": "Health Check",
        "description": "Health check endpoint.",
        "operationId": "health_check_health_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/api/health": {
      "get": {
        "summary": "Api Health Check",
        "description": "API health check endpoint.",
        "operationId": "api_health_check_api_health_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/{full_path}": {
      "get": {
        "summary": "Serve React App",
        "description": "Serve React app for client-side routing.",
        "operationId": "serve_react_app__full_path__get",
        "parameters": [
          {
            "name": "full_path",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Full Path"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AuthResponse": {
        "properties": {
          "access_token": {
            "type": "string",
            "title": "Access Token"
          },
          "token_type": {
            "type": "string",
            "title": "Token Type",
            "default": "bearer"
          },
          "user": {
            "additionalProperties": true,
            "type": "object",
            "title": "User"
          }
        },
        "type": "object",
        "required": [
          "access_token",
          "user"
        ],
        "title": "AuthResponse",
        "description": "Authentication response."
      },
      "ClientMessage": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "Message ID"
          },
          "role": {
            "type": "string",
            "title": "Role",
            "description": "Message role: user, assistant, or system"
          },
          "parts": {
            "items": {
              "$ref": "#/components/schemas/MessagePart"
            },
            "type": "array",
            "title": "Parts",
            "description": "Message parts array"
          }
        },
        "type": "object",
        "required": [
          "id",
          "role",
          "parts"
        ],
        "title": "ClientMessage",
        "description": "AI SDK 5 ClientMessage structure."
      },
      "ConversationHealthResponse": {
        "properties": {
          "status": {
            "type": "string",
            "title": "Status"
          },
          "graph_initialized": {
            "type": "boolean",
            "title": "Graph Initialized"
          },
          "llm_available": {
            "type": "boolean",
            "title": "Llm Available"
          },
          "test_response_received": {
            "type": "boolean",
            "title": "Test Response Received"
          },
          "error": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error"
          }
        },
        "type": "object",
        "required": [
          "status",
          "graph_initialized",
          "llm_available",
          "test_response_received"
        ],
        "title": "ConversationHealthResponse",
        "description": "Response model for conversation health check."
      },
      "ConversationRequest": {
        "properties": {
          "messages": {
            "items": {
              "$ref": "#/components/schemas/ClientMessage"
            },
            "type": "array",
            "minItems": 1,
            "title": "Messages",
            "description": "Array of conversation messages"
          },
          "session_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Session Id",
            "description": "Optional conversation session ID"
          }
        },
        "type": "object",
        "required": [
          "messages"
        ],
        "title": "ConversationRequest",
        "description": "AI SDK compatible request model for conversation messages."
      },
      "ConversationResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "content": {
            "type": "string",
            "title": "Content"
          },
          "role": {
            "type": "string",
            "title": "Role"
          },
          "agent": {
            "type": "string",
            "title": "Agent"
          },
          "session_id": {
            "type": "string",
            "title": "Session Id"
          },
          "user_id": {
            "type": "string",
            "title": "User Id"
          },
          "created_at": {
            "type": "string",
            "title": "Created At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "content",
          "role",
          "agent",
          "session_id",
          "user_id",
          "created_at"
        ],
        "title": "ConversationResponse",
        "description": "Response model for conversation messages."
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "LoginRequest": {
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email"
          },
          "password": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Password"
          }
        },
        "type": "object",
        "required": [
          "email",
          "password"
        ],
        "title": "LoginRequest",
        "description": "User login request."
      },
      "MessagePart": {
        "properties": {
          "type": {
            "type": "string",
            "title": "Type",
            "description": "Part type: text, image, etc."
          },
          "text": {
            "type": "string",
            "title": "Text",
            "description": "Text content for text parts"
          }
        },
        "type": "object",
        "required": [
          "type",
          "text"
        ],
        "title": "MessagePart",
        "description": "AI SDK 5 message part structure."
      },
      "MessageResponse": {
        "properties": {
          "message": {
            "type": "string",
            "title": "Message"
          }
        },
        "type": "object",
        "required": [
          "message"
        ],
        "title": "MessageResponse",
        "description": "Simple message response."
      },
      "PlaidTokenExchangeRequest": {
        "properties": {
          "public_token": {
            "type": "string",
            "title": "Public Token",
            "description": "Public token from Plaid Link"
          },
          "session_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Session Id",
            "description": "Optional session ID for conversation resumption"
          }
        },
        "type": "object",
        "required": [
          "public_token"
        ],
        "title": "PlaidTokenExchangeRequest",
        "description": "Request model for exchanging Plaid public token."
      },
      "PlaidTokenExchangeResponse": {
        "properties": {
          "status": {
            "type": "string",
            "title": "Status",
            "description": "Operation status"
          },
          "message": {
            "type": "string",
            "title": "Message",
            "description": "Human-readable message"
          },
          "accounts_connected": {
            "type": "integer",
            "title": "Accounts Connected",
            "description": "Number of accounts connected"
          },
          "account_ids": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Account Ids",
            "description": "List of connected account IDs"
          }
        },
        "type": "object",
        "required": [
          "status",
          "message",
          "accounts_connected"
        ],
        "title": "PlaidTokenExchangeResponse",
        "description": "Response model for token exchange endpoint."
      },
      "RegisterRequest": {
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email"
          },
          "password": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Password"
          },
          "name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          }
        },
        "type": "object",
        "required": [
          "email",
          "password"
        ],
        "title": "RegisterRequest",
        "description": "User registration request."
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      }
    },
    "securitySchemes": {
      "HTTPBearer": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  }
}
